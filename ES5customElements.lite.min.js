/* ES5customElements.js v1.0.0 | Copyright (c) 2021, Emanuel Rojas VÃ¡squez | BSD 3-Clause License | Copyright (c) 2018 The Polymer Project Authors | license http://polymer.github.io/LICENSE.txt */
!function(e,t){if(e.ES5customElements)return console.error('"ES5customElements.js" has already been defined');let n="customElements",r="prototype",o="Static",c="-IN",f="constructor",i="Constructor",u="Extends",l=t.createElement,a=Object.getOwnPropertyDescriptor,s=new Set(["annotation-xml","color-profile","font-face","font-face-src","font-face-uri","font-face-format","font-face-name","missing-glyph"]);function p(e,t,n){Object.defineProperty(e,t,{value:n})}function d(e,t){return Object.getOwnPropertyNames(t).forEach(function(n){Object.defineProperty(e,n,a(t,n))}),e}function m(e){return/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(e)}let b,O,g=Object.getOwnPropertyNames(e);if(e.Reflect||e[n]&&!e[n].polyfillWrapFlushCallback)for(b=0;b<g.length;b++){if(0!==(O=g[b]).indexOf("HTML"))continue;let t=e[O],n=function(){return Reflect.construct(t,[],this.constructor)};e[O]=n,n[r]=t[r],n[r][f]=n,p(n,c,O),p(n,"name",O)}else for(b=0;b<g.length;b++)0===(O=g[b]).indexOf("HTML")&&p(e[O],c,O);t.createElement=function(r,o){if((r=(r+"").toLowerCase())&&!m(r)&&o){let e=l.apply(t,arguments);return e.setAttribute("is",o.is),e}if(r&&m(r)&&o&&function(e){if("object"==typeof e&&"[object Object]"===Object.prototype.toString.call(e)){let t=Object.getPrototypeOf(e);return null===t||t[f]===Object}return!1}(o)){let t=o.is,r=e[n].get(t);return r.setAttribute("is",t),new r}if(r&&m(r)&&!o){return new(e[n].get(r))}if(r)return l.apply(t,arguments)},e.ES5customElements={define:function(t,l,a){t=(t+"").toLowerCase();let m=d(Object.create(null),l),b=function(e,t){let n=e[u],o=e[i],l=function(){let e=n.call(this);return o&&o.apply(e,arguments),e};return p(l[r]=Object.create(n[r]),f,l),p(l,c,t),delete e[u],delete e[i],l}(m,t);return function(e,t){let n=t[o];n&&d(e,n),delete t[o]}(b,m),d(b[r],m),e[n].define(t,b,a),s.add(t),b},get:function(t){return e[n].get(t)},upgrade:function(t){e[n].upgrade(t)},whenDefined:function(t){return e[n].whenDefined(t)},get Names(){let e=[];return s.forEach(function(t){e.push(t)}),e},"-listNames":s}}(window,document);